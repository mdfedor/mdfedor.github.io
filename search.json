[{"title":"Desiderata","url":"/2023/05/16/Desiderata/","content":"<p>在繁嚣与匆忙中默默前行，</p>\n<p>请记住孤寂中也有安详。</p>\n<p>我们尽可能地不屈，<span id=\"more\"></span></p>\n<p>与他人和睦共处。</p>\n<p>谈话要真挚平和，</p>\n<p>悉心倾听，</p>\n<p>即使他们乏味无知；</p>\n<p>人人都会有故事叙述。</p>\n<p>远离咄咄逼人的人，</p>\n<p>避免苦恼精神。</p>\n<p>不与他人攀比，导致虚荣抱怨；</p>\n<p>有人比你伟大，有人差你很远。</p>\n<p>享受自己的成就、计划，</p>\n<p>永葆对事业的兴趣，</p>\n<p>不管它多不起眼，</p>\n<p>都会因光阴而繁华。</p>\n<p>世间充满欺诈，处事处处小心，</p>\n<p>切勿因此遮蔽美德。</p>\n<p>无数人追求高尚，</p>\n<p>让生命角落闪烁英雄光芒。</p>\n<p>就做你自己，而不是虚假矫情。</p>\n<p>但是不要放弃爱情，变成愤世嫉妒；</p>\n<p>在所有的枯燥和失望之中，</p>\n<p>爱像青草常驻。</p>\n<p>接受岁月的教诲，得体舍弃年轻。</p>\n<p>培养心灵的力量，以对突然的不幸。</p>\n<p>不要让孤独黑暗折磨自己。</p>\n<p>恐惧来自这样的疲劳孤寂。</p>\n<p>不去逾矩，同时善待自己。</p>\n<p>牢记你是宇宙之子，</p>\n<p>不亚于一切树木繁星；</p>\n<p>始终拥有存在的权利。</p>\n<p>无论宇宙是否向你展示未来，</p>\n<p>它都在为你展开。</p>\n<p>与神灵和平相处，无论你怎样看祂，</p>\n<p>在生命的喧嚣混乱里，确保平静心怀。</p>\n<p>世界虽有虚假、劳苦、梦想破灭，</p>\n<p>她却依然美好。</p>\n<p>努力保持快乐，</p>\n<p>活出兴高采烈。</p>\n","tags":["杂记"]},{"title":"Hi,2025","url":"/2025/01/01/Hi-2025/","content":"<p>一年就这么云淡风轻地没了，我做了些什么，貌似是什么都没做，踏踏实实地又浪费了一年。掰掰手指头数一数，如果一年流逝的速度是这样快的话，真的没几年，一辈子就交代了。这一年，我比以往任何一年思考死亡这件事的时间，算起来都要多一点。我说不清楚为什么要想这个事情，只是觉得有点苦涩。这一年，我耗费了很多时间，乱七八糟玩了好多的游戏。没一个游戏玩到一个结局，也许就是单纯地把时间在感觉上快速地用掉。<span id=\"more\"></span></p>\n<p>别的事情，我想不起来做过什么。而做过的这两件事，我又想了一些东西。</p>\n<p>我以前简单带过一些对人性的看法，七宗罪中有傲慢，嫉妒，暴怒，懒惰，贪婪，暴食，色欲。佛家有贪嗔痴。无论哪一种分类，都可以清楚地看到，我们不想看到的那一面，但又不得不主动或被动地在其中挣扎与煎熬。游戏的成功运营，离不开对人性的掌控。利用你的嫉妒，让你乐此不疲地付出时间，金钱。利用你的暴怒，再次将付出的时间，金钱加倍。转到其它任意一个领域，你总是有太多弱点与漏洞可以被轻易地利用。差别不大，殊途同归。</p>\n<p>人与其说是在努力，在拼搏，不如说是在与人性的恶掰手腕，所谓的上进优秀，不过是在短暂没有顺从人性的斑驳随心所欲后展现出的另一面。人性支配着一切，简单粗暴，但极具穿透力。</p>\n<p>而死亡呢。任何人的死亡，对于我而言，没有任何参考的意义与价值，其中的情绪，仅仅局限于当事人及与当事人相关的人而已。死亡作为运行的自然规律，作为彻底远离人性苦海的一种方式，我后来只是看着，当它来的时候，等着就好。它没什么好的，但也没太大的坏。如果说人性是一个死循环，也许死亡仅仅是一个跳出循环的条件，不值得被冠以任何评价。</p>\n<p>我以前对自己说过，任何突如其来的惶恐，都是自身不作为的并发症。只是当时更多的是自责，现如今，自责依然有，但新增的是，能平静一点。人会很累，因为人会不停地想成为这样想成为那样，想要这个想要那个，想这想那，所有的一切都在交换中尽量保持微妙的平衡。有时候，说很多和什么都没说的效果是一样的。新的一年，我说不出什么打算，我唯一的打算，就是想活得真实一点，而所谓新的一年，也只是一个计数器而已，还有几十个罢了。</p>\n","tags":["杂记"]},{"title":"gdb note","url":"/2024/04/24/gdb-note/","content":"<h3 id=\"启动命令\"><a href=\"#启动命令\" class=\"headerlink\" title=\"启动命令\"></a>启动命令</h3><ul>\n<li><p>gdb调试主要是c和c++，要使用gdb,在编译时要在加编译条件</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcc -g hello.c -o hello </span><br><span class=\"line\">g++ -g hello.cpp -o hello</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动gdb的几种方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gdb program <span class=\"comment\">#program就是可执行文件，一般在当前目录下</span></span><br><span class=\"line\">gdb program core <span class=\"comment\">#用gdb同时调试一个运行程序和core文件，core是程序非法执行后core dump后产生的文件</span></span><br><span class=\"line\">gdb program 1234 <span class=\"comment\">#程序如果是服务程序，可以指定这个服务程序运行时的进程ID,gdb会自动attach上去，并调试他。gdb启动时候可以加一些gdb启动开关</span></span><br><span class=\"line\">--symbols=SYSFILE <span class=\"comment\">#从指定文件中读取符号表</span></span><br><span class=\"line\">--se=FILE <span class=\"comment\">#从指定文件中读取符号表信息，并把他用在可执行文件中</span></span><br><span class=\"line\">--core=COREFILE <span class=\"comment\">#调试时core dump的core文件</span></span><br><span class=\"line\">--directory=DIR <span class=\"comment\">#加入一个源文件的搜索路径，默认搜索路径是环境变量中PATH所定义的路径</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a><span id=\"more\"></span>基本命令</h3><ul>\n<li><p>help查看所有gdb命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span> 列出gdb命令种类</span><br><span class=\"line\"><span class=\"built_in\">help</span> breakpoints 查看设置断点的所有命令</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看源代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">list(简写l) <span class=\"comment\">#查看源程序代码，默认显示10行，按回车继续查看剩余</span></span><br><span class=\"line\">list行号 <span class=\"comment\">#将显示当前文件以“行号”为中心的前后10行代码</span></span><br><span class=\"line\">list 函数名 <span class=\"comment\">#将显示“函数名所在函数的源代码”</span></span><br><span class=\"line\">list <span class=\"comment\">#不带参数，将接着上一次list命令，输出下边的内容</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>断点相关</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">b 行号 <span class=\"comment\">#在某行设置断点</span></span><br><span class=\"line\">info b <span class=\"comment\">#显示所有断点信息</span></span><br><span class=\"line\">delete b <span class=\"comment\">#清除所有断点</span></span><br><span class=\"line\">clear 行号n <span class=\"comment\">#清除第n行的断点</span></span><br><span class=\"line\">b func <span class=\"comment\">#在函数入口处设置断点</span></span><br><span class=\"line\">delete 断点号n <span class=\"comment\">#删除第n个断点</span></span><br><span class=\"line\"><span class=\"built_in\">disable</span> 断点号n <span class=\"comment\">#暂停第n个断点</span></span><br><span class=\"line\"><span class=\"built_in\">enable</span> 断点号n <span class=\"comment\">#开启第n个断点</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>调试相关</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">r <span class=\"comment\">#运行程序</span></span><br><span class=\"line\">n <span class=\"comment\">#单步执行，跳过函数，不进入函数</span></span><br><span class=\"line\">s <span class=\"comment\">#单步执行程序，进入程序</span></span><br><span class=\"line\">until <span class=\"comment\">#跳出循环</span></span><br><span class=\"line\">until+行号 <span class=\"comment\">#运行至某行，不仅仅用来跳出循环</span></span><br><span class=\"line\">finish <span class=\"comment\">#运行程序，直到当前函数完成返回，并打印函数返回时的堆栈地址和返回值及参数值等信息</span></span><br><span class=\"line\">call func(arg) <span class=\"comment\">#call 函数(参数)：调用程序中可见的函数，并传递参数 call gdb _myfunc(44)</span></span><br><span class=\"line\">q <span class=\"comment\">#退出</span></span><br><span class=\"line\">disassemble /r main <span class=\"comment\">#反汇编代码,/r选项表示显示原始的机器码</span></span><br><span class=\"line\">x/[n][f][u] address<span class=\"comment\">#查看内存 n要显示的单位数量,f显示格式 xduotfaics u 单位大小 b(字节)h(2字节)w(4字节)g(8字节)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打印表达式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">p a <span class=\"comment\">#将显示整数a 的值</span></span><br><span class=\"line\">p ++a <span class=\"comment\">#将把a中的值加1,并显示出来</span></span><br><span class=\"line\">p name <span class=\"comment\">#将显示字符串name的值</span></span><br><span class=\"line\">p <span class=\"built_in\">test</span>(22) <span class=\"comment\">#将以整数22作为参数调用test()函数</span></span><br><span class=\"line\">p <span class=\"built_in\">test</span>(a) <span class=\"comment\">#将以变量a作为参数调用test()函数</span></span><br><span class=\"line\">display 表达式  <span class=\"comment\">#使用display命令设置一个表达式后，将在每次单步进行指令后，接着会输出被设置的表达式及值</span></span><br><span class=\"line\">watch 表达式 <span class=\"comment\">#设置一个监视点，一旦被监视的表达式的值改变，gdb将强行终止正在被调试的程序</span></span><br><span class=\"line\">whatis <span class=\"comment\">#查询变量或函数</span></span><br><span class=\"line\">info <span class=\"keyword\">function</span> <span class=\"comment\">#查询函数</span></span><br><span class=\"line\">info locals <span class=\"comment\">#显示当前堆栈页的所有变量</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看运行信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">where</span>/bt <span class=\"comment\">#当前运行的堆栈列表</span></span><br><span class=\"line\">bt backtrace <span class=\"comment\">#显示当前调用堆栈</span></span><br><span class=\"line\">up/down <span class=\"comment\">#改变堆栈显示的深度</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> args <span class=\"comment\">#指定运行时的参数</span></span><br><span class=\"line\">show args <span class=\"comment\">#查看设置好的参数</span></span><br><span class=\"line\">info program <span class=\"comment\">#来查看程序是否在运行，进程号，被暂停的原因</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分割窗口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">layout <span class=\"comment\">#用于分割窗口，可以一边查看代码，一边测试</span></span><br><span class=\"line\">layout <span class=\"comment\">#显示源代码窗口</span></span><br><span class=\"line\">layout asm <span class=\"comment\">#显示反汇编窗口</span></span><br><span class=\"line\">layout regs <span class=\"comment\">#显示源代码/反汇编和CPU寄存器窗口</span></span><br><span class=\"line\">layout <span class=\"built_in\">split</span> <span class=\"comment\">#显示源代码和反汇编窗口</span></span><br><span class=\"line\">Ctrl+L <span class=\"comment\">#刷新窗口</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","categories":["Tool"],"tags":["gdb"]},{"title":"git note","url":"/2024/01/09/git-note/","content":"<h3 id=\"git创建公钥\"><a href=\"#git创建公钥\" class=\"headerlink\" title=\"git创建公钥\"></a>git创建公钥</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置git用户签名</span></span><br><span class=\"line\">git config --global user.name 用户名</span><br><span class=\"line\">git config --global user.email 邮箱</span><br><span class=\"line\"><span class=\"comment\">#生成公钥,可以默认连续回车</span></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;邮箱号&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"git提交流程\"><a href=\"#git提交流程\" class=\"headerlink\" title=\"git提交流程\"></a>git提交流程</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加到暂存区域</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\"><span class=\"comment\">#提交到本地分支</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;注释&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#提交到远程仓库</span></span><br><span class=\"line\">git push -u origin 分支</span><br></pre></td></tr></table></figure>\n<h3 id=\"git回退提交版本\"><a href=\"#git回退提交版本\" class=\"headerlink\" title=\"git回退提交版本\"></a><span id=\"more\"></span>git回退提交版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看提交日志</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\"><span class=\"comment\">#简化输出信息</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline</span><br><span class=\"line\"><span class=\"comment\">#查看每一次命令</span></span><br><span class=\"line\">git reflog</span><br><span class=\"line\"><span class=\"comment\">#回退版本</span></span><br><span class=\"line\">git reset --hard 版本<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"git拉取远程分支代码到本地\"><a href=\"#git拉取远程分支代码到本地\" class=\"headerlink\" title=\"git拉取远程分支代码到本地\"></a>git拉取远程分支代码到本地</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看远程仓库</span></span><br><span class=\"line\">git remote -v</span><br><span class=\"line\"><span class=\"comment\">#获取远程仓库最新版本代码</span></span><br><span class=\"line\">git fetch origin main:temp</span><br><span class=\"line\"><span class=\"comment\">#查看temp分支与本地原有分支不同</span></span><br><span class=\"line\">git diff temp</span><br><span class=\"line\"><span class=\"comment\">#将temp分支和本地分支合并</span></span><br><span class=\"line\">git merge temp</span><br><span class=\"line\"><span class=\"comment\">#删除temp分支</span></span><br><span class=\"line\">git branch -d temp</span><br></pre></td></tr></table></figure>\n<h3 id=\"git分支管理\"><a href=\"#git分支管理\" class=\"headerlink\" title=\"git分支管理\"></a>git分支管理</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看本地分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"><span class=\"comment\">#创建本地分支并切换到分支</span></span><br><span class=\"line\">git checkout -b branch</span><br><span class=\"line\"><span class=\"comment\">#创建分支</span></span><br><span class=\"line\">git branch 分支名称</span><br><span class=\"line\"><span class=\"comment\">#切换分支</span></span><br><span class=\"line\">git checkout 分支名称</span><br><span class=\"line\"><span class=\"comment\">#将分支合并到当前分支,先git checkout当前分支,然后在git merge需要合并的分支</span></span><br><span class=\"line\"><span class=\"comment\">#也可以远程新建分支然后拉到本地</span></span><br><span class=\"line\">git checkout -b dev origin/dev</span><br><span class=\"line\"><span class=\"comment\">#查看所有本地仓库分支和远程分支</span></span><br><span class=\"line\">git branch -al</span><br><span class=\"line\"><span class=\"comment\">#提交本地分支到远程分支,本地分支和远程分支相同时不需要冒号直接写dev就可以</span></span><br><span class=\"line\">git push origin dev:dev</span><br><span class=\"line\"><span class=\"comment\">#删除远程分支</span></span><br><span class=\"line\">git push origin --delete dev</span><br><span class=\"line\"><span class=\"comment\">#也可以push一个空分支到远程分支,其实就相当于删除远程分支</span></span><br><span class=\"line\">git push origin :dev <span class=\"comment\">#推送本地的空分支(冒号前面的分支)到远程origin的dev(冒号后面的分支,没有会自动创建)</span></span><br><span class=\"line\"><span class=\"comment\">#把某个分支上的内容拉去到本地</span></span><br><span class=\"line\">git pull origin dev(远程分支名称) <span class=\"comment\">#会把本地当前的分支和远程dev分支自动合并</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"git撤销对远程仓库的push-amp-commit提交\"><a href=\"#git撤销对远程仓库的push-amp-commit提交\" class=\"headerlink\" title=\"git撤销对远程仓库的push&amp;commit提交\"></a>git撤销对远程仓库的push&amp;commit提交</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看日志,获取回退版本号</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\"><span class=\"comment\">#执行回退命令,有两种,--soft 和 --hard,区别是soft只是改变了HEAD的指向,本地代码不会变,hard直接会改变本地代码,不仅指向改变,代码也回到了那个版本的样子</span></span><br><span class=\"line\">git reset --soft 版本号</span><br><span class=\"line\">git reset --hard 版本号</span><br><span class=\"line\"><span class=\"comment\">#强制提交当前版本号</span></span><br><span class=\"line\">git push origin 分支名 --force</span><br><span class=\"line\"><span class=\"comment\">#撤销commit,同样查看需要撤销的commit的前面一个提交版本id</span></span><br><span class=\"line\">git reset --hard commit_id</span><br></pre></td></tr></table></figure>\n<h3 id=\"git设置忽略文件-处理之前已经传过的需要忽略的文件\"><a href=\"#git设置忽略文件-处理之前已经传过的需要忽略的文件\" class=\"headerlink\" title=\"git设置忽略文件,处理之前已经传过的需要忽略的文件\"></a>git设置忽略文件,处理之前已经传过的需要忽略的文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#.gitignore只能忽略原来没有被跟踪的文件,因此跟踪过的文件是无法被忽略的.解决方式就是先把本地缓存删除(改变成未track状态),然后再提交</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> -r --cached .</span><br><span class=\"line\">git add.</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;update xx&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"同时在一个分支上操作\"><a href=\"#同时在一个分支上操作\" class=\"headerlink\" title=\"同时在一个分支上操作\"></a>同时在一个分支上操作</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#本地发生改动的文件保存一下</span></span><br><span class=\"line\">git stash</span><br><span class=\"line\"><span class=\"comment\">#远程的代码同步到本地</span></span><br><span class=\"line\">git pull origin dev --rebase</span><br><span class=\"line\"><span class=\"comment\">#本地保存的文件弹出,继续修改</span></span><br><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n<h3 id=\"ssh配置文件\"><a href=\"#ssh配置文件\" class=\"headerlink\" title=\"ssh配置文件\"></a>ssh配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">Hostname ssh.github.com</span><br><span class=\"line\">Port 443</span><br><span class=\"line\">User git</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试git连接\"><a href=\"#测试git连接\" class=\"headerlink\" title=\"测试git连接\"></a>测试git连接</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n","categories":["Tool"],"tags":["git"]},{"title":"someresource","url":"/2024/01/14/resource/","content":"<h3 id=\"blog\"><a href=\"#blog\" class=\"headerlink\" title=\"blog\"></a>blog</h3><ul>\n<li>数学符号1:<a href=\"https://blog.csdn.net/wait_for_eva/article/details/84307306\">https://blog.csdn.net/wait_for_eva/article/details/84307306</a></li>\n<li>数学符号2:<a href=\"https://www.cnblogs.com/Xuxiaokang/p/15654336.html\">https://www.cnblogs.com/Xuxiaokang/p/15654336.html</a></li>\n</ul>\n","categories":["backup"],"tags":["resource"]},{"title":"一些话","url":"/2023/11/13/%E4%B8%80%E4%BA%9B%E8%AF%9D/","content":"<p>从弄完这个博客到现在，已经隔了这么长的时间。在迷茫与恍惚中，岁末将至。我已经没有太多力气去想过去的事情，无关重不重要，过去的，我真的没有任何办法去重走一遍，即使重走一遍，也未必见得有多好。走到如今，我没什么好抱怨的，我给自己早早地做好了打算，我不再有任何奢望，甚至生命对于我而言，我只能说，如果即将失去，我也坦然接受。人嘛，都是过完自己的一生，然后就死去，没太多差别，只是你奋斗的多一些，我虚度的多一些的区别。<span id=\"more\"></span>面对自己之时，无需再说一些无关痛痒的话，该怎么样，心知肚明。剩下的时间，我独自一人，慢慢把时间过完，在某一天，或许疾病或许意外，悄然离开也算是一生。还是那句话，能做点什么，就做点什么，不要再有太多的得失计较，没什么的，在往后的日子，喜悦之事逐渐会消失，剩下的，皆是冰冷与寂静。</p>\n","tags":["杂记"]},{"title":"关于执念","url":"/2024/02/11/%E5%85%B3%E4%BA%8E%E6%89%A7%E5%BF%B5/","content":"<p>我知道,你心里总会有这个结.不愿意说而已.当听到某个人对某个人心心念念,难舍难忘的时候,你心如止水,觉得不过如此,甚至觉得那人有些矫情,你能痛快地给那人快刀斩乱麻地做出一个决定,不愿意,就拉倒.可惜到了自己身上,你依旧逃不脱细枝末节,变得完全没有为别人做抉择的那种杀伐果断.你知道为什么吗?因为发生在别人身上的事,你不用负责,发生在你自己身上的事,你做不到无视.你还是在乎你自己,但别人你没有那么在乎,他人的一切在你看来,就是消遣,你自己能做到消遣自己吗?<span id=\"more\"></span>好久之前,依稀记得和一个人说过一句话,你喜欢的,不是这个,恰巧是碰到这个罢了,倘若当初碰到另外一个让你觉得还不错的,你一样会去喜欢,那么倘若之后发生不愉快,你的目标也就真的是一个随机值而已.真正不愿意撒手的,其实是无法去面对沉没成本带来的冲击,说白了,你还是没办法和人性抗衡.从某种程度上来说,感情的这种执念,不过是人生另外一种不如意的折射,各种嘈杂混于一处,放大了这种复杂的情绪.很多时候,人难过就是自己是自己,他人是他人,分的太清楚了,像他人看自己那样,去看自己,或许会清楚许多.对于失去这件事,失去就是失去了,不用说什么以后还会有更好的,可能不会有了,不用自我安慰,仅仅是看着一些事发生于自己身上,然后不动声色地离开.很多无能为力的时候,降低期望是最好的选择.人其实一直在和人性搏斗,所以,一切会那么难.最后想和自己说,那么多难读的书,难做的事,没有哪一样是轻而易举地可以取得.努力争取的同时,还要有不遂人愿的承受能力.一点点去想开….</p>\n","tags":["杂记"]},{"title":"总有一天,你会和自己和解","url":"/2023/12/31/%E6%80%BB%E6%9C%89%E4%B8%80%E5%A4%A9-%E4%BD%A0%E4%BC%9A%E5%92%8C%E8%87%AA%E5%B7%B1%E5%92%8C%E8%A7%A3/","content":"<p>今天是12月31日,中国人阳历意义上一年的最后一天。明天和今天并没有任何不一样的地方，但计数从2023变成了2024，仅此而已。</p>\n<p>坐在椅子上望着窗外，一个男人在阳台晾衣服，还有被套。离春节还有一个多月，我一阵恍惚，一年又走完了。心里某处不由自主地抽搐了一下，说实话，真的有些难过。在漫长沉默与发呆过后，我缓了缓神，我幻想桌子的对面坐着另一个我，他什么也不会说，也面无表情，只是静静的坐着。我看着他，他也看着我，我朝他点了点头。故事从哪里开始的呢，我说不清，也不打算去考证，甚至过去的事我都希望慢慢被尘封，我可以说的，只是通过它们，后来自己想到的一些东西。写在开头，有些人或事，我真的不敢大言不惭地放大到所有人身上，我没有那个分量，所以，我依旧把范围固定到我自己，我觉得足够了。<span id=\"more\"></span></p>\n<p>一辈子，总要有件事去做的。单纯的叫做“事”有些不准，或许称作目标，或者是理想，怎么称呼都可以，总之，这个东西必须要有，是什么，伟大与渺小不重要，但是必须要有，如果这个东西没有，人走到后面，真的会迷失掉。但这个东西到底是什么呢，我觉得把这个想清楚，而且早早的想清楚的人，后来的路无论再怎么苦，都走得很稳。可惜，我不属于那一部分的人。只是在后知后觉中知道了它的重要性，只可惜，有一点晚了吧。我们活着的大多数，从一出生就是固定的模式，童年短暂的玩乐，到后来一路上学，再到之后工作，成家，抚养下一代，然后继续这个循环，没人会告诉你这些是为什么，为什么每个人都需要这么走，所以很多时候，我们只是机械地去做着，倘若被问起，就有一个理由，大家都是这样过来的，不会有错，跟着走就好了。那些在跟着走的一部分人中，有些人从中找到了自己喜欢做的事，我认为这部分人是幸运的，他们在还没有被动生存的时候，找到了方向，他们在这个领域早早地踏入，然后一直坚持，无意间这份坚持在时间的流逝中换做物质回馈到他们身上，然后他们一辈子就围绕着这件事展开，剩下的附属都逐渐迎刃而解。而反观没有在这个跟着走的途中找到自己想要的，之后的种种人与事便构成了芸芸众生，怎么样的都有，但有个共同点，就是活得不是那么快乐。因为后来被动生存中，少了一份发自内心的愿意，多了一些被迫无奈的疲惫，效果显而易见。找到自己生命中的核心，有人在童年由于家庭环境或周围氛围的影响下就找到了，有人因为在学习过程中找到了，有人在工作的时候找到了，有的人一直没找到，只能说，这个事其实才是人一生最大的影响。工作只不过是形式的外化，不是内在。早点把这个想清楚，想清楚什么东西是自己一生持续可以做下去的，那么在任何时候，纵然独自一人，依旧不会感到孤独，也有能力承受别人无法承受的痛苦，因为知道自己为什么而活着的人，真的很令人羡慕与动容。而至于说为什么只能按那个流程走下去，我没办法给自己有很好的解释，或许最开始的那句，大家都是这么过来的，没有错的。有没有错，是不是每个人都是这样，其实不重要了，也许在超出我的认知范围中，有人可以无所事事锦衣玉食一辈子，但，对于我来说，毫无参考意义啊。</p>\n<p>而与人相处，我想说的是，如果你想让某个人成为你想成为的那样的人，请你自己先做那样的人。那样你的痛苦便会少很多，至少你不会因为他或她不能成为你想象的那样而徒增愤怒。人与人之间真的没有太多要说的，只能说，做一个善良的人，有同理心，但不要过度，任何时候都不要想当然认为，时刻记住每个人都是一个独立的个体，你能控制的只有你自己，就像你在网络游戏中抱怨队友，你说的再多，骂得再多，你除了自己无限愤怒，改变不了任何事情。而对于感情，我没有什么话语权，我只能说，彼此喜欢的，那是修来的缘，好好珍惜，单方面喜欢的，合理表达自己的情感，得到肯定回复自然皆大欢喜，得到拒绝，尊重彼此选择，有能力就去争取，努力无果就选择释然，对于对方来说，是尊重和负担的解除，假如你是真的喜欢这个人，就要接受发生在ta身上的一切，包括ta不喜欢你这件事，有时候可能是无法达到对方预期，那就努力，而有时候并不是自己如何如何，仅仅是这件事就发生在自己身上而已，默默接受转身走开就好。如果你真的执着想知道为什么，有的人喜欢养猫，有的人喜欢养狗，还有人喜欢养老虎，你可以得到什么答案，没有答案的，接受，然后过好自己的生活就好。</p>\n<p>慢慢的你会发现，这个世界的大多数人和你并没有什么关系，无论财力，能力还是其他的种种，由于信息时代的发展，我们可以透过媒介轻易地获取到他人生活视角中的一部分，但真的，和自己一点关系都没有，但人的对比往往会不经意地表现出来，痛苦的开始或许来源于此吧，人性使然。在自己能力范围以内，好好的生活，就是你我的缩影，接受自己和发生在自己身上的每一件事，能努力多少是多少，别人的高度在你的视角中只是一个数字，不是标准，你自己能做到的才是自己的标准。在最后，我想说一句，我无意伤害的人，那不是我的本意。希望你过的开心。</p>\n<p>总有一天，你会和自己和解，我也是。</p>\n","tags":["杂记"]},{"title":"给自己的一封信","url":"/2024/02/11/%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%80%E5%B0%81%E4%BF%A1/","content":"<p>新的一年,希望自己真的明白一些东西.人生这场旅途,不会有谁会告诉自己,什么时候该做什么事,除了时间,但当时间把一切都说清楚的时候,往往是已经无能为力的时候.无论一个人还是许多人,不要去细想一些东西,没人经得起细看.不要高估自己在任何人心中的位置,任何人心中第一的位置永远是自己,接受自己在别人那里不那么重要.无论再怎么喜欢一个人,当理性的结果是否定,早点松开手,这件事是众多事中最可有可无的一件事,不要去细想任何细节,只是接受结果,然后不要那么沮丧与落寞,也不要去怨恨与后悔.<span id=\"more\"></span>任何时候突然的惶恐,其实是看不到自我价值的副作用.做一些事情,脑海中经常会闪现出一些问题,做这件事是不是太迟了,现在会不会有点晚了,现在做还来得及吗,一无所有的当下,今后应该怎么活下去.对于迟早的问题,在世俗的目光看,是的,已经迟了.按任何行业的路径,在应该产出的阶段去投入,基本没有任何希望了,但这种巨大的压力面前,对于什么都没有的人来说,其实已经不重要了.可以做的真的只有一件,接受,然后坚强一些,鼓起勇气活下去.舍弃一些东西,孤独的把路走完,走到哪里算哪里,做到哪里算哪里,不要自暴自弃,不要怨弃任何人,包括自己,身前身后已经没有人能支撑自己了,自己再去打击自己,真的会难过的.简化一切,尊重一切,回归到自我,不要奢望任何美好的幻想,就活在现实中,即使觉得很苦涩,先忍一忍,把这一世的卷子答完,给自己些宽容.当真的撑不下去的时候,看看自己写的,再把想说的给自己说一说,把自己当做自己的朋友,也许,真的朋友,也只有自己了.好好活着.</p>\n","tags":["杂记"]},{"title":"install Arch","url":"/2025/02/25/install-Arch/","content":"<h2 id=\"华硕rog幻16air安装archlinux-i3记录-最小化安装完成后-图形界面，窗口管理器均未安装\"><a href=\"#华硕rog幻16air安装archlinux-i3记录-最小化安装完成后-图形界面，窗口管理器均未安装\" class=\"headerlink\" title=\"华硕rog幻16air安装archlinux+i3记录(最小化安装完成后,图形界面，窗口管理器均未安装)\"></a>华硕rog幻16air安装archlinux+i3记录(最小化安装完成后,图形界面，窗口管理器均未安装)</h2><ul>\n<li>查看电脑显卡状态,这条命令显示当前电脑的所有显卡，并且能看到加载的显卡驱动<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">lspci -k -d ::03xx</span><br></pre></td></tr></table></figure></li>\n<li>关闭nvidia默认的驱动<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;blacklist nouveau&quot;</span> | sudo <span class=\"built_in\">tee</span> /etc/modprobe.d/blacklist-nouveau.conf</span><br></pre></td></tr></table></figure></li>\n<li>更新initramfs<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkinitcpio -P</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span></li>\n<li>重启,然后确认nouveau是否加载<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">lsmod | grep nouveau</span><br></pre></td></tr></table></figure></li>\n<li>安装下amd显卡驱动<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo pacman -S xf86-video-amdgpu mesa libglvnd</span><br></pre></td></tr></table></figure></li>\n<li>安装固件支持<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo pacman -S linux-firmware</span><br></pre></td></tr></table></figure></li>\n<li>加载amdgpu模块<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/mkinitcpio.conf</span><br><span class=\"line\">MODULES=(amdgpu)</span><br><span class=\"line\">sudo mkinitcpio -P</span><br><span class=\"line\">sudo grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure></li>\n<li>查看下dri目录<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> /dev/dri</span><br><span class=\"line\"><span class=\"built_in\">ls</span> /sys/class/drm/</span><br></pre></td></tr></table></figure></li>\n<li>如果card0不存在，有card1,就需要手动告诉Xorg使用card1<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">lspci -nn <span class=\"comment\">#lspci -nn可以查看所有BusID</span></span><br><span class=\"line\">sudo vim /etc/X11/xorg.conf.d/20-amdgpu.conf</span><br><span class=\"line\">Section <span class=\"string\">&quot;Device&quot;</span></span><br><span class=\"line\">\tIdentifier <span class=\"string\">&quot;AMD Graphics&quot;</span></span><br><span class=\"line\">\tDriver <span class=\"string\">&quot;amdgpu&quot;</span></span><br><span class=\"line\">\tOption <span class=\"string\">&quot;Device&quot;</span> <span class=\"string\">&quot;dev/dri/card1&quot;</span></span><br><span class=\"line\">\tBusID  <span class=\"string\">&quot;PCI:65:0:0&quot;</span></span><br><span class=\"line\">EndSection</span><br></pre></td></tr></table></figure></li>\n<li>有可能当前用户没有权限访问card1,所以把当前用户加入到video组<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG video <span class=\"variable\">$USER</span></span><br></pre></td></tr></table></figure></li>\n<li>然后安装桌面环境<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo pacman -S xorg xorg-xinit i3status dmenu alacritty picom feh</span><br><span class=\"line\">vim ~/.xinitrc</span><br><span class=\"line\"><span class=\"built_in\">exec</span> i3</span><br><span class=\"line\">startx</span><br></pre></td></tr></table></figure></li>\n<li>重启Xorg进程<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart display-manager</span><br></pre></td></tr></table></figure></li>\n<li>查看下日志<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dmesg | grep -i <span class=\"string\">&#x27;drm|vga|nvidia|amdgpu&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"进入i3一些配置\"><a href=\"#进入i3一些配置\" class=\"headerlink\" title=\"进入i3一些配置\"></a>进入i3一些配置</h2><ul>\n<li>设置全局DPI<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Xft.dpi: 150&quot;</span> &gt;&gt; ~/.Xresources</span><br><span class=\"line\">xrdb -merge ~/.Xresources</span><br><span class=\"line\">i3-msg restart</span><br></pre></td></tr></table></figure></li>\n<li>安装dm<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo pacman -S lightdm lightdm-gtk-greeter</span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> lightdm</span><br></pre></td></tr></table></figure></li>\n<li>修改屏幕亮度和色度<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo pacman -S redshift</span><br><span class=\"line\">redshift -O 4500 -b 0.8</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"对于华硕rog幻16air双显卡切换没研究明白，但是如果只用独显，没用集显，默认的集显好像也没关掉，会导致键盘顶部那一块很烫，解决办法\"><a href=\"#对于华硕rog幻16air双显卡切换没研究明白，但是如果只用独显，没用集显，默认的集显好像也没关掉，会导致键盘顶部那一块很烫，解决办法\" class=\"headerlink\" title=\"对于华硕rog幻16air双显卡切换没研究明白，但是如果只用独显，没用集显，默认的集显好像也没关掉，会导致键盘顶部那一块很烫，解决办法\"></a>对于华硕rog幻16air双显卡切换没研究明白，但是如果只用独显，没用集显，默认的集显好像也没关掉，会导致键盘顶部那一块很烫，解决办法</h2><ul>\n<li>先安装nvidia显卡驱动<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo pacman -S nvidia nvidia-utils nvidia-settings</span><br></pre></td></tr></table></figure></li>\n<li>然后修改下配置文件<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/modprobe.d/nvidia-drm.conf </span><br><span class=\"line\">options nvidia-drm modeset=0</span><br><span class=\"line\">sudo mkinitcpio -P <span class=\"comment\">#执行一下</span></span><br></pre></td></tr></table></figure></li>\n<li>改一下grub,这个是开机不让nvidia显卡接管，电源设置成节能<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/default/grub</span><br><span class=\"line\">GRUB_CMDLINE_LINUX_DEFAULT=<span class=\"string\">&quot;loglevel=5 nowatchdog modprobe.blacklist=nouveau nvidia-drm.modeset=0 amd_pstate=passive amd_pstate.default_profile=powersave&quot;</span></span><br><span class=\"line\">sudo grub-mkconfig -o /boot/grub/grub.cfg <span class=\"comment\">#执行一下,重启一下</span></span><br></pre></td></tr></table></figure></li>\n<li>可以下一个cpupower,这个可以查看当前一些频率性能状态<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo pacman -S cpupower</span><br><span class=\"line\">cpupower frequency-info <span class=\"comment\">#查看状态</span></span><br></pre></td></tr></table></figure></li>\n<li>yay-git的签名问题<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gpg --search-keys <span class=\"string\">&quot;lilac (build machine)&quot;</span></span><br><span class=\"line\">gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys F9F9FA97A403F63E</span><br><span class=\"line\">sudo pacman-key --lsign-key F9F9FA97A403F63E</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","categories":["note"],"tags":["install_OS"]}]